/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getAttributeAccess().getAlternatives(), "rule__Attribute__Alternatives");
			builder.put(grammarAccess.getBoolean0Access().getAlternatives(), "rule__Boolean0__Alternatives");
			builder.put(grammarAccess.getSchemaAccess().getGroup(), "rule__Schema__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_0(), "rule__Attribute__Group_0__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_1(), "rule__Attribute__Group_1__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_2(), "rule__Attribute__Group_2__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_3(), "rule__Attribute__Group_3__0");
			builder.put(grammarAccess.getSystemTypeAccess().getGroup(), "rule__SystemType__Group__0");
			builder.put(grammarAccess.getEnumAccess().getGroup(), "rule__Enum__Group__0");
			builder.put(grammarAccess.getEnumAccess().getGroup_6(), "rule__Enum__Group_6__0");
			builder.put(grammarAccess.getEnumAccess().getGroup_11(), "rule__Enum__Group_11__0");
			builder.put(grammarAccess.getEnumValueAccess().getGroup(), "rule__EnumValue__Group__0");
			builder.put(grammarAccess.getEnumValueAccess().getGroup_3(), "rule__EnumValue__Group_3__0");
			builder.put(grammarAccess.getEnumValueAccess().getGroup_4(), "rule__EnumValue__Group_4__0");
			builder.put(grammarAccess.getSchemaAccess().getNameAssignment_2(), "rule__Schema__NameAssignment_2");
			builder.put(grammarAccess.getSchemaAccess().getTypeAssignment_4(), "rule__Schema__TypeAssignment_4");
			builder.put(grammarAccess.getSchemaAccess().getTypeAssignment_5(), "rule__Schema__TypeAssignment_5");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_0_0(), "rule__Attribute__NameAssignment_0_0");
			builder.put(grammarAccess.getAttributeAccess().getTypeNameAssignment_0_2(), "rule__Attribute__TypeNameAssignment_0_2");
			builder.put(grammarAccess.getAttributeAccess().getIsNullableAssignment_0_3(), "rule__Attribute__IsNullableAssignment_0_3");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_1_0(), "rule__Attribute__NameAssignment_1_0");
			builder.put(grammarAccess.getAttributeAccess().getTypeNameAssignment_1_2(), "rule__Attribute__TypeNameAssignment_1_2");
			builder.put(grammarAccess.getAttributeAccess().getIsArrayAssignment_1_3(), "rule__Attribute__IsArrayAssignment_1_3");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_2_0(), "rule__Attribute__NameAssignment_2_0");
			builder.put(grammarAccess.getAttributeAccess().getTypeNameAssignment_2_2(), "rule__Attribute__TypeNameAssignment_2_2");
			builder.put(grammarAccess.getAttributeAccess().getIsArrayAssignment_2_3(), "rule__Attribute__IsArrayAssignment_2_3");
			builder.put(grammarAccess.getAttributeAccess().getIsNullableAssignment_2_4(), "rule__Attribute__IsNullableAssignment_2_4");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_3_0(), "rule__Attribute__NameAssignment_3_0");
			builder.put(grammarAccess.getAttributeAccess().getTypeNameAssignment_3_2(), "rule__Attribute__TypeNameAssignment_3_2");
			builder.put(grammarAccess.getSystemTypeAccess().getNameAssignment_1(), "rule__SystemType__NameAssignment_1");
			builder.put(grammarAccess.getSystemTypeAccess().getAttributeAssignment_3(), "rule__SystemType__AttributeAssignment_3");
			builder.put(grammarAccess.getSystemTypeAccess().getAttributeAssignment_4(), "rule__SystemType__AttributeAssignment_4");
			builder.put(grammarAccess.getEnumAccess().getNameAssignment_1(), "rule__Enum__NameAssignment_1");
			builder.put(grammarAccess.getEnumAccess().getAttributeAssignment_5(), "rule__Enum__AttributeAssignment_5");
			builder.put(grammarAccess.getEnumAccess().getAttributeAssignment_6_1(), "rule__Enum__AttributeAssignment_6_1");
			builder.put(grammarAccess.getEnumAccess().getEnumvalueAssignment_10(), "rule__Enum__EnumvalueAssignment_10");
			builder.put(grammarAccess.getEnumAccess().getEnumvalueAssignment_11_1(), "rule__Enum__EnumvalueAssignment_11_1");
			builder.put(grammarAccess.getEnumValueAccess().getValueAssignment_3_1(), "rule__EnumValue__ValueAssignment_3_1");
			builder.put(grammarAccess.getEnumValueAccess().getNumberAssignment_4_1(), "rule__EnumValue__NumberAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
