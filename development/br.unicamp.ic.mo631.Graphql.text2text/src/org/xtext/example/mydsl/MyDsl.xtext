// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/Graphql" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

Schema returns Schema:
	'Schema {'
		'name:' name=EString
	'}'
	type+=Type ( type+=Type)*;
	
Type returns Type:
	SystemType | Int0 | Float | String0 | Boolean | ID0 | Enum;


EString returns ecore::EString:
	STRING | ID;

Attribute returns Attribute:
	//TODO: implement nullable exceptions
	(name=EString ':'  typeName=EString isNullable?=' @nullable') |
	(name=EString ':'  typeName=EString isArray?=' @list') |
	(name=EString ':'  typeName=EString isArray?=' @list' isNullable?=' @nullable') |
	(name=EString ':'  typeName=EString)
	;

SystemType returns SystemType:
	'type ' + name=EString + ' {'
		attribute+=Attribute ( attribute+=Attribute)*
	'}';

Int0 returns Int:
	'Int';

Float returns Float:
	'Float';

String0 returns String:
	'String';

Boolean returns Boolean:
	'Boolean';
	
ID0 returns ID:
	'ID';

//TODO implement support to enum
Enum returns Enum:
	'Enum'
	name=EString
	'{'
		'attribute' '{' attribute+=Attribute ( "," attribute+=Attribute)* '}' 
		'enumvalue' '{' enumvalue+=EnumValue ( "," enumvalue+=EnumValue)* '}' 
	'}';

Boolean0 returns type::Boolean:
	'true' | 'false';

EnumValue returns EnumValue:
	{EnumValue}
	'EnumValue'
	'{'
		('value' value=EString)?
		('number' number=Int1)?
	'}';

Int1 returns type::Int:
	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;
