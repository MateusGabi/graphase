/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Boolean_Float_ID0_Int0_String0_BooleanKeyword_or_FloatKeyword_or_IDKeyword_or_IntKeyword_or_StringKeyword;
	protected AbstractElementAlias match_SystemType_TypeKeyword_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Boolean_Float_ID0_Int0_String0_BooleanKeyword_or_FloatKeyword_or_IDKeyword_or_IntKeyword_or_StringKeyword = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBooleanAccess().getBooleanKeyword()), new TokenAlias(false, false, grammarAccess.getFloatAccess().getFloatKeyword()), new TokenAlias(false, false, grammarAccess.getID0Access().getIDKeyword()), new TokenAlias(false, false, grammarAccess.getInt0Access().getIntKeyword()), new TokenAlias(false, false, grammarAccess.getString0Access().getStringKeyword()));
		match_SystemType_TypeKeyword_0_p = new TokenAlias(true, false, grammarAccess.getSystemTypeAccess().getTypeKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Boolean_Float_ID0_Int0_String0_BooleanKeyword_or_FloatKeyword_or_IDKeyword_or_IntKeyword_or_StringKeyword.equals(syntax))
				emit_Boolean_Float_ID0_Int0_String0_BooleanKeyword_or_FloatKeyword_or_IDKeyword_or_IntKeyword_or_StringKeyword(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SystemType_TypeKeyword_0_p.equals(syntax))
				emit_SystemType_TypeKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'Int' | 'Float' | 'String' | 'Boolean' | 'ID'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Boolean_Float_ID0_Int0_String0_BooleanKeyword_or_FloatKeyword_or_IDKeyword_or_IntKeyword_or_StringKeyword(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'type '+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=EString
	 */
	protected void emit_SystemType_TypeKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
