/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Schema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSchemaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeTypeParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		
		//Schema:
		//	'Schema {'
		//	'name:' name=EString
		//	'}'
		//	type+=Type type+=Type*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Schema {' 'name:' name=EString '}' type+=Type type+=Type*
		public Group getGroup() { return cGroup; }
		
		//'Schema {'
		public Keyword getSchemaKeyword_0() { return cSchemaKeyword_0; }
		
		//'name:'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//type+=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
		
		//type+=Type*
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_5_0() { return cTypeTypeParserRuleCall_5_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSystemTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInt0ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cString0ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cID0ParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEnumParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Type:
		//	SystemType | Int0 | Float | String0 | Boolean | ID0 | Enum;
		@Override public ParserRule getRule() { return rule; }
		
		//SystemType | Int0 | Float | String0 | Boolean | ID0 | Enum
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SystemType
		public RuleCall getSystemTypeParserRuleCall_0() { return cSystemTypeParserRuleCall_0; }
		
		//Int0
		public RuleCall getInt0ParserRuleCall_1() { return cInt0ParserRuleCall_1; }
		
		//Float
		public RuleCall getFloatParserRuleCall_2() { return cFloatParserRuleCall_2; }
		
		//String0
		public RuleCall getString0ParserRuleCall_3() { return cString0ParserRuleCall_3; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_4() { return cBooleanParserRuleCall_4; }
		
		//ID0
		public RuleCall getID0ParserRuleCall_5() { return cID0ParserRuleCall_5; }
		
		//Enum
		public RuleCall getEnumParserRuleCall_6() { return cEnumParserRuleCall_6; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeNameEStringParserRuleCall_2_0 = (RuleCall)cTypeNameAssignment_2.eContents().get(0);
		
		////
		//Attribute:
		//	name=EString ':' typeName=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ':' typeName=EString
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typeName=EString
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//EString
		public RuleCall getTypeNameEStringParserRuleCall_2_0() { return cTypeNameEStringParserRuleCall_2_0; }
	}
	public class SystemTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SystemType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSpaceLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeAttributeParserRuleCall_3_0 = (RuleCall)cAttributeAssignment_3.eContents().get(0);
		private final Assignment cAttributeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributeAttributeParserRuleCall_4_0 = (RuleCall)cAttributeAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////	'Attribute'
		////	name=EString
		////	'{'
		////		('isArray' isArray=Boolean0)?
		////		('isNullable' isNullable=Boolean0)?
		////		'type' type=Type
		////	'}';
		//SystemType:
		//	'type '+ name=EString+ ' {'
		//	attribute+=Attribute attribute+=Attribute*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'type '+ name=EString+ ' {' attribute+=Attribute attribute+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//'type '+
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=EString+
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//' {'
		public Keyword getSpaceLeftCurlyBracketKeyword_2() { return cSpaceLeftCurlyBracketKeyword_2; }
		
		//attribute+=Attribute
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_3_0() { return cAttributeAttributeParserRuleCall_3_0; }
		
		//attribute+=Attribute*
		public Assignment getAttributeAssignment_4() { return cAttributeAssignment_4; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_4_0() { return cAttributeAttributeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class Int0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Int0");
		private final Keyword cIntKeyword = (Keyword)rule.eContents().get(1);
		
		////	'SystemType'
		////	name=EString
		////	'{'
		////		'attribute' '{' attribute+=Attribute ( "," attribute+=Attribute)* '}' 
		////	'}';
		//Int0 Int:
		//	'Int';
		@Override public ParserRule getRule() { return rule; }
		
		//'Int'
		public Keyword getIntKeyword() { return cIntKeyword; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Float");
		private final Keyword cFloatKeyword = (Keyword)rule.eContents().get(1);
		
		//Float:
		//	'Float';
		@Override public ParserRule getRule() { return rule; }
		
		//'Float'
		public Keyword getFloatKeyword() { return cFloatKeyword; }
	}
	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.String0");
		private final Keyword cStringKeyword = (Keyword)rule.eContents().get(1);
		
		//String0 String:
		//	'String';
		@Override public ParserRule getRule() { return rule; }
		
		//'String'
		public Keyword getStringKeyword() { return cStringKeyword; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Boolean");
		private final Keyword cBooleanKeyword = (Keyword)rule.eContents().get(1);
		
		//Boolean:
		//	'Boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//'Boolean'
		public Keyword getBooleanKeyword() { return cBooleanKeyword; }
	}
	public class ID0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ID0");
		private final Keyword cIDKeyword = (Keyword)rule.eContents().get(1);
		
		//ID0 ID:
		//	'ID';
		@Override public ParserRule getRule() { return rule; }
		
		//'ID'
		public Keyword getIDKeyword() { return cIDKeyword; }
	}
	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAttributeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttributeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributeAttributeParserRuleCall_5_0 = (RuleCall)cAttributeAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cAttributeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cAttributeAttributeParserRuleCall_6_1_0 = (RuleCall)cAttributeAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEnumvalueKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cEnumvalueAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cEnumvalueEnumValueParserRuleCall_10_0 = (RuleCall)cEnumvalueAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cEnumvalueAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cEnumvalueEnumValueParserRuleCall_11_1_0 = (RuleCall)cEnumvalueAssignment_11_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		////TODO
		//Enum:
		//	'Enum'
		//	name=EString
		//	'{'
		//	'attribute' '{' attribute+=Attribute ("," attribute+=Attribute)* '}'
		//	'enumvalue' '{' enumvalue+=EnumValue ("," enumvalue+=EnumValue)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Enum' name=EString '{' 'attribute' '{' attribute+=Attribute ("," attribute+=Attribute)* '}' 'enumvalue' '{'
		//enumvalue+=EnumValue ("," enumvalue+=EnumValue)* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'Enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'attribute'
		public Keyword getAttributeKeyword_3() { return cAttributeKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//attribute+=Attribute
		public Assignment getAttributeAssignment_5() { return cAttributeAssignment_5; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_5_0() { return cAttributeAttributeParserRuleCall_5_0; }
		
		//("," attribute+=Attribute)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//attribute+=Attribute
		public Assignment getAttributeAssignment_6_1() { return cAttributeAssignment_6_1; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_6_1_0() { return cAttributeAttributeParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'enumvalue'
		public Keyword getEnumvalueKeyword_8() { return cEnumvalueKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//enumvalue+=EnumValue
		public Assignment getEnumvalueAssignment_10() { return cEnumvalueAssignment_10; }
		
		//EnumValue
		public RuleCall getEnumvalueEnumValueParserRuleCall_10_0() { return cEnumvalueEnumValueParserRuleCall_10_0; }
		
		//("," enumvalue+=EnumValue)*
		public Group getGroup_11() { return cGroup_11; }
		
		//","
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//enumvalue+=EnumValue
		public Assignment getEnumvalueAssignment_11_1() { return cEnumvalueAssignment_11_1; }
		
		//EnumValue
		public RuleCall getEnumvalueEnumValueParserRuleCall_11_1_0() { return cEnumvalueEnumValueParserRuleCall_11_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class Boolean0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Boolean0");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean0 type::Boolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EnumValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNumberKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNumberAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNumberInt1ParserRuleCall_4_1_0 = (RuleCall)cNumberAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EnumValue:
		//	{EnumValue}
		//	'EnumValue'
		//	'{' ('value' value=EString)? ('number' number=Int1)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumValue} 'EnumValue' '{' ('value' value=EString)? ('number' number=Int1)? '}'
		public Group getGroup() { return cGroup; }
		
		//{EnumValue}
		public Action getEnumValueAction_0() { return cEnumValueAction_0; }
		
		//'EnumValue'
		public Keyword getEnumValueKeyword_1() { return cEnumValueKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=EString
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_3_1_0() { return cValueEStringParserRuleCall_3_1_0; }
		
		//('number' number=Int1)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'number'
		public Keyword getNumberKeyword_4_0() { return cNumberKeyword_4_0; }
		
		//number=Int1
		public Assignment getNumberAssignment_4_1() { return cNumberAssignment_4_1; }
		
		//Int1
		public RuleCall getNumberInt1ParserRuleCall_4_1_0() { return cNumberInt1ParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class Int1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Int1");
		private final Keyword cIntKeyword = (Keyword)rule.eContents().get(1);
		
		//Int1 type::Int:
		//	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;
		@Override public ParserRule getRule() { return rule; }
		
		//'Int'
		public Keyword getIntKeyword() { return cIntKeyword; }
	}
	
	
	private final SchemaElements pSchema;
	private final TypeElements pType;
	private final EStringElements pEString;
	private final AttributeElements pAttribute;
	private final SystemTypeElements pSystemType;
	private final Int0Elements pInt0;
	private final FloatElements pFloat;
	private final String0Elements pString0;
	private final BooleanElements pBoolean;
	private final ID0Elements pID0;
	private final EnumElements pEnum;
	private final Boolean0Elements pBoolean0;
	private final EnumValueElements pEnumValue;
	private final Int1Elements pInt1;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSchema = new SchemaElements();
		this.pType = new TypeElements();
		this.pEString = new EStringElements();
		this.pAttribute = new AttributeElements();
		this.pSystemType = new SystemTypeElements();
		this.pInt0 = new Int0Elements();
		this.pFloat = new FloatElements();
		this.pString0 = new String0Elements();
		this.pBoolean = new BooleanElements();
		this.pID0 = new ID0Elements();
		this.pEnum = new EnumElements();
		this.pBoolean0 = new Boolean0Elements();
		this.pEnumValue = new EnumValueElements();
		this.pInt1 = new Int1Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Schema:
	//	'Schema {'
	//	'name:' name=EString
	//	'}'
	//	type+=Type type+=Type*;
	public SchemaElements getSchemaAccess() {
		return pSchema;
	}
	
	public ParserRule getSchemaRule() {
		return getSchemaAccess().getRule();
	}
	
	//Type:
	//	SystemType | Int0 | Float | String0 | Boolean | ID0 | Enum;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	////
	//Attribute:
	//	name=EString ':' typeName=EString;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	////	'Attribute'
	////	name=EString
	////	'{'
	////		('isArray' isArray=Boolean0)?
	////		('isNullable' isNullable=Boolean0)?
	////		'type' type=Type
	////	'}';
	//SystemType:
	//	'type '+ name=EString+ ' {'
	//	attribute+=Attribute attribute+=Attribute*
	//	'}';
	public SystemTypeElements getSystemTypeAccess() {
		return pSystemType;
	}
	
	public ParserRule getSystemTypeRule() {
		return getSystemTypeAccess().getRule();
	}
	
	////	'SystemType'
	////	name=EString
	////	'{'
	////		'attribute' '{' attribute+=Attribute ( "," attribute+=Attribute)* '}' 
	////	'}';
	//Int0 Int:
	//	'Int';
	public Int0Elements getInt0Access() {
		return pInt0;
	}
	
	public ParserRule getInt0Rule() {
		return getInt0Access().getRule();
	}
	
	//Float:
	//	'Float';
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//String0 String:
	//	'String';
	public String0Elements getString0Access() {
		return pString0;
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}
	
	//Boolean:
	//	'Boolean';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//ID0 ID:
	//	'ID';
	public ID0Elements getID0Access() {
		return pID0;
	}
	
	public ParserRule getID0Rule() {
		return getID0Access().getRule();
	}
	
	////TODO
	//Enum:
	//	'Enum'
	//	name=EString
	//	'{'
	//	'attribute' '{' attribute+=Attribute ("," attribute+=Attribute)* '}'
	//	'enumvalue' '{' enumvalue+=EnumValue ("," enumvalue+=EnumValue)* '}'
	//	'}';
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}
	
	//Boolean0 type::Boolean:
	//	'true' | 'false';
	public Boolean0Elements getBoolean0Access() {
		return pBoolean0;
	}
	
	public ParserRule getBoolean0Rule() {
		return getBoolean0Access().getRule();
	}
	
	//EnumValue:
	//	{EnumValue}
	//	'EnumValue'
	//	'{' ('value' value=EString)? ('number' number=Int1)?
	//	'}';
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}
	
	//Int1 type::Int:
	//	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;
	public Int1Elements getInt1Access() {
		return pInt1;
	}
	
	public ParserRule getInt1Rule() {
		return getInt1Access().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
